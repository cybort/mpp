mpp(1) -- mini preprocessor
===========================

## SYNOPSYS

`mpp` <file>...<br>
`mpp` `-I <dir>:<dir>...` <file>...<br>
`mpp` `-M` <file>...<br>

## DESCRIPTION

The mini preprocessor, **mpp**, is a _macro_ processor, used to transform source
files. It is offered as an alternative to cpp(1), which is designed with C-style
languages in mind, and often chokes on input from a different language.

The only macros understood by the preprocessor are, at the moment, `#include`
and `#define`. See [MACROS][] for more information.

## OPTIONS

**mpp** expects any number of file names as arguments. The preprocessor reads
each file in order, together with any files specified in them through an
`#include` macro. All the output generated by the combined input files is
written to standard output.

* `-I`, `--include`=[`<dir>:<dir>...`]:
  Specifies a list of directories to search for files when resolving an
  `#include`, besides the current directory.

* `-M`, `--make`:
  Instead of outputting the result of preprocessing, output a rule suitable
  for make(1) describing the dependencies of the involved source files.

## MACROS

There are two macros recognized by **mpp**: `#include` allows you to include the
contents of a file (after pre-processing it as well), while `#define` allows you
to specify replacement values for snippets of text.

A macro is only parsed if it's the only text in a line. Neither leading nor
trailing spaces should appear around a macro invocation.

* `#include "<file>"`:

  Files will be searched relative to the current directory, or relative to any
  directory specified by the `-I` command line flag (see [OPTIONS][] above).

  The path is expected to be surrounded by double quotes.

  When a file is found, it is in turn preprocessed, so any `#include` directives
  in the included file will be followed as well.

  Files are, however, preprocessed at most once per invocation of **mpp**. If a
  file is included multiple times during the same invocation, only the first
  time will actually have effect, and the other invocations will be ignored.

  If a file cannot be found, execution will stop and no output will be
  generated.

* `#define <string> <replacement>`:

  Any subsequent appearances of `<string>` (in this or other source files), will
  be replaced by `<replacement>`.

  `<string>` cannot have spaces, and `<replacement>` cannot _start_ with spaces,
  but _trailing spaces will be considered part of the replacement string_.

## BUGS

**mpp**'s source code is hosted at https://github.com/foca/mpp. Bug reports
and/or contributions are welcome through the Issue Tracker present there.

## COPYRIGHT

mpp is Copyright (c) 2015 Nicolas Sanguinetti `<http://foca.io>`

## SEE ALSO

cpp(1), m4(1), make(1)
